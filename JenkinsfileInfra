pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'  // Cambia a la región que prefieras
        INSTANCE_TYPE = 't2.medium'
        AMI_ID = 'ami-066784287e358dad1'  // ID de la AMI (Amazon Linux 2)
        GIT_REPO = 'https://github.com/joshlopez07/demo-devops-java.git'
        BRANCH = 'master'
        GITHUB_CREDENTIALS = 'github_credentials'
        DOCKER_IMAGE = "joshlopez07/demo-devops-java:1.0.0"
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials'
        KEY_PAIR_NAME = 'minikube' // Nombre del par de claves SSH en AWS
        SSH_PRIVATE_KEY = '/home/jenkins/minikube.pem' // Ruta al archivo de llave privada .pem
    }

    stages {
        stage('Clone Code') {
            steps {
                git branch: "${BRANCH}", url: "${GIT_REPO}", credentialsId: "${GITHUB_CREDENTIALS}"
            }
        }

        stage('Provision EC2 with Terraform') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS-Credentials']]) {
                    script {
                        writeFile file: 'main.tf', text: """
                        provider "aws" {
                          region = "${AWS_REGION}"
                        }

                        resource "aws_instance" "minikubeTerraform" {
                          ami           = "${AMI_ID}"
                          instance_type = "${INSTANCE_TYPE}"
                          key_name      = "${KEY_PAIR_NAME}"
                          subnet_id     = "subnet-07cdbf3708dae9d81"

                          security_groups = ["sg-0ebae823a0b82b061"] 
                          tags = {
                            Name = "minikube-instanceTerraform"
                          }

                          provisioner "remote-exec" {
                            inline = [
                              "sudo yum update -y",
                              
                              // Instalación de dependencias de red
                              "sudo yum install -y docker conntrack socat ebtables ethtool",  
                              "sudo systemctl enable docker",
                              "sudo systemctl start docker",
                              "sudo usermod -aG docker ec2-user",
                              "curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.18.0/bin/linux/amd64/kubectl",
                              "chmod +x ./kubectl",
                              "sudo mv ./kubectl /usr/local/bin/kubectl",
                              "curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64",
                              "chmod +x minikube-linux-amd64",
                              "sudo install minikube-linux-amd64 /usr/local/bin/minikube",
                              
                              // Instalación de cri-dockerd
                              "sudo yum install -y git golang",
                              "git clone https://github.com/Mirantis/cri-dockerd.git",
                              "cd cri-dockerd",
                              "sudo mkdir -p /usr/local/bin/",
                              "mkdir bin",
                              "go get && go build -o bin/cri-dockerd",
                              "sudo mv bin/cri-dockerd /usr/local/bin/cri-dockerd",
                              "sudo cp bin/cri-dockerd /usr/local/bin/",
                              "sudo cp packaging/systemd/cri-docker.service /etc/systemd/system/",
                              "sudo cp packaging/systemd/cri-docker.socket /etc/systemd/system/",
                              "sudo systemctl daemon-reload",
                              "sudo systemctl enable cri-docker.service",
                              "sudo systemctl enable --now cri-docker.socket",

                              // Instalación de crictl
                              "curl -LO https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.30.0/crictl-v1.30.0-linux-amd64.tar.gz",
                              "sudo tar -C /usr/local/bin -xzf crictl-v1.30.0-linux-amd64.tar.gz",
                              
                              // Iniciar Minikube
                              "sudo minikube start --driver=none",

                              // Configuración de carpetas y permisos
                              "sudo mkdir -p /home/ec2-user/.kube /home/ec2-user/.minikube",
                              "sudo mv /root/.kube /home/ec2-user/.kube || true",
                              "sudo mv /root/.minikube /home/ec2-user/.minikube || true",
                              "sudo chown -R ec2-user:ec2-user /home/ec2-user/.kube /home/ec2-user/.minikube"
                            ]

                            connection {
                              type        = "ssh"
                              user        = "ec2-user"
                              private_key = file("${SSH_PRIVATE_KEY}")
                              host        = aws_instance.minikubeTerraform.public_ip
                            }
                          }
                        }

                        output "instance_ip" {
                          value = aws_instance.minikubeTerraform.public_ip
                        }
                        """
                        sh 'terraform init'
                        sh 'terraform plan'
                        sh 'terraform apply -auto-approve'
                    }
                }
            }
        }

        stage('Configure Minikube and Deploy') {
            steps {
                script {
                    def instance_ip = sh(script: "terraform output -raw instance_ip", returnStdout: true).trim()
                    
                    // Conectar por SSH a la instancia EC2 para validar o configurar más cosas si es necesario
                    sh """
                    ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} ec2-user@${instance_ip} << EOF
                    sudo minikube start --driver=none
                    if [ -f /root/.kube/config ]; then
                        sudo mkdir -p /home/ec2-user/.kube /home/ec2-user/.minikube
                        sudo cp -r /root/.kube/* /home/ec2-user/.kube/
                        sudo cp -r /root/.minikube/* /home/ec2-user/.minikube/
                        sudo chown -R ec2-user:ec2-user /home/ec2-user/.kube /home/ec2-user/.minikube
                    else
                        echo "Minikube configuration not found."
                        exit 1
                    fi
                    kubectl get nodes
                    EOF
                    """
                    
                    // Actualizar KUBECONFIG con la IP de la nueva instancia
                    withEnv(["KUBECONFIG=/home/jenkins/.kube/config"]) {
                        sh """
                        scp -i ${SSH_PRIVATE_KEY} ec2-user@${instance_ip}:/home/ec2-user/.kube/config /home/jenkins/.kube/config
                        kubectl apply -f deployment.yaml --kubeconfig=/home/jenkins/.kube/config
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed.'
        }
        /*cleanup {
            // Eliminar recursos de AWS al final
            sh 'terraform destroy -auto-approve'
        }*/
    }
}